---
---
- name: Delete files starting with 0.log in /var/log/pod
  hosts: all
  become: yes
  tasks:
    - name: Find files starting with 0.log in /var/log/pod
      find:
        paths: /var/log/pod
        patterns: "0.log*"
        recurse: no
      register: files_to_delete

    - name: Delete files starting with 0.log
      shell: "rm -f {{ item.path }}"
      loop: "{{ files_to_delete.files }}"
      when: files_to_delete.matched > 0
      register: deletion_results
      changed_when: deletion_results is not skipped

    - name: Show deleted files
      debug:
        msg: "{{ deletion_results.results | map(attribute='item.path') | list }}"
      when: deletion_results is not skipped







- hosts: kafka_nodes
  become: true
  become_method: pbrun
  become_user: kafka
  gather_facts: no
  vars:
    action: start  # Specify 'start' or 'stop'

  tasks:

    - name: Check Kafka and Zookeeper status using jps
      shell: jps
      register: jps_output
      changed_when: false

    - name: Check if Zookeeper is running (QuorumPeerMain)
      set_fact:
        zookeeper_running: "{{ 'QuorumPeerMain' in jps_output.stdout }}"

    - name: Check if Kafka is running
      set_fact:
        kafka_running: "{{ 'Kafka' in jps_output.stdout }}"

    - name: Check if Zookeeper is in the correct state
      debug:
        msg: "Zookeeper is {{ 'running' if zookeeper_running else 'stopped' }}"

    - name: Check if Kafka is in the correct state
      debug:
        msg: "Kafka is {{ 'running' if kafka_running else 'stopped' }}"

    # Actions for stopping Kafka and Zookeeper
    - name: Stop Zookeeper
      shell: /opt/apps/kafka/kafka/bin/zookeeper-server-stop
      when: action == "stop" and zookeeper_running
      notify: Zookeeper Stop Confirmation

    - name: Stop Kafka
      shell: /opt/apps/kafka/kafka/bin/kafka-server-stop
      when: action == "stop" and kafka_running
      notify: Kafka Stop Confirmation

    # Actions for starting Kafka and Zookeeper
    - name: Start Zookeeper
      shell: nohup /opt/apps/kafka/kafka/bin/zookeeper-server-start -daemon /app/kafka/kafka/zookeeper.properties &
      when: action == "start" and not zookeeper_running
      notify: Zookeeper Start Confirmation

    - name: Start Kafka
      shell: nohup /opt/apps/kafka/kafka/bin/kafka-server-start -daemon /app/kafka/kafka/server.properties &
      when: action == "start" and not kafka_running
      notify: Kafka Start Confirmation

  handlers:
    - name: Zookeeper Stop Confirmation
      debug:
        msg: "Zookeeper has been successfully stopped."

    - name: Kafka Stop Confirmation
      debug:
        msg: "Kafka has been successfully stopped."

    - name: Zookeeper Start Confirmation
      debug:
        msg: "Zookeeper has been successfully started."









---
- name: Check Fabric status
  shell: pbrun k2fabric status
  register: fabric_status
  changed_when: false

- name: Start Fabric if not running
  shell: pbrun k2fabric start
  when: "'running' not in fabric_status.stdout"

- name: Restart Fabric
  shell: pbrun k2fabric restart
  when: restart_fabric
  notify:
    - Check Fabric Cluster Status
    - Check for long-running tasks

- name: Force stop Fabric
  shell: pbrun k2fabric force-stop
  when: force_stop_fabric
  notify:
    - Stop Fabric

- name: Check Fabric Cluster Status
  shell: pbrun k2fabric cluster-status
  register: fabric_cluster_status
  changed_when: false

- name: Check for long-running tasks
  shell: pbrun check_long_running_tasks
  register: long_tasks
  when: "'task in progress' in fabric_cluster_status.stdout"

- name: Mark tasks as completed or failed in TDM if tasks are stuck
  shell: |
    psql -U {{ db_user }} -d {{ db_name }} -f {{ lookup('template', 'tdm_update.sql.j2') }}
  when: long_tasks.stdout != ""

- name: Deploy TDM LU
  shell: deploy_tdm_lu
  when: deploy_tdm_lu

    - name: Kafka Start Confirmation
      debug:
        msg: "Kafka has been successfully started."




---
- hosts: cassandra_nodes
  become: true
  become_method: pbrun
  become_user: cassandra
  gather_facts: no
  vars:
    action: "start"  # Specify 'start' or 'stop'
    cassandra_password: ""  # Set the password here or pass it as an extra variable

  tasks:
  
    - name: Check Cassandra node status
      shell: nodetool status
      register: cassandra_status
      changed_when: false

    - name: Verify Cassandra is running
      set_fact:
        cassandra_running: "{{ 'Up' in cassandra_status.stdout }}"

    - name: Output Cassandra node status
      debug:
        msg: "Cassandra nodes are {{ 'running
